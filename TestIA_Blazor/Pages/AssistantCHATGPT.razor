@page "/testia"
@using TestIA_Blazor.Services
@using System.Security.Claims
@using System.Net.Http;
@inject NavigationManager NavigationManager;
@inject IAnswerGeneratorService AnswerGeneratorService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthorizationService AuthorizationService

<PageTitle>Test IA</PageTitle>


<h3>Test IA</h3>

<EditForm Model="@assistant">
    <textarea class="form-control" id="txt" @bind="assistant.Prompt"
              style="width:1000px;height:500px" placeholder="Ingresa tu texto aqui" />

    <br />

    <table>
        <tr>
            <td><button class="btn btn-primary" @onclick="Generate">Consultar</button></td>
            <td><button class="btn btn-primary" @onclick="Clear">Borrar</button></td>
        </tr>
    </table>

    <br />
    <br />

    <h2>Test</h2>
    <br />
    <br />

    @if (answers != null && answers.Count > 0)
    {
        foreach (var answer in answers)
        {
            <p class="bg-chat">@answer</p>
        }
    }

</EditForm>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private readonly HttpClient client = new HttpClient();
    private string? authMessage;
    private string? surname;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    Assistant assistant = new Assistant();
    List<string> answers = new List<string>();

    private async void Generate()
    {
        var answer = await AnswerGeneratorService.GenerateAnswer(assistant.Prompt);
        answers.Add(answer);
        StateHasChanged();
    }

    private async void Clear()
    {
        answers = new List<string>();
        assistant.Prompt = string.Empty;

        VerifyLogged();
    }

    private async void VerifyLogged()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            authMessage = $"{user.Identity.Name} is authenticated.";
            claims = user.Claims;
            surname = user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;
        }
        else
        {
            authMessage = "The user is NOT authenticated.";

            var query = new Uri(NavigationManager.Uri).Query;
            Console.WriteLine(query);
        }


        var values = new Dictionary<string, string>
        {
            { "op", "login"     },
            { "email", "ejemplo2@hotmail.com" },
            { "password", "Ejemplo#123456" }
        };

        var response = await this.client.PostAsJsonAsync("http://localhost:7200/users", values);
        var responseString = await response.Content.ReadAsStringAsync();

        Console.WriteLine(responseString);
    }

    protected override async Task OnInitializedAsync()
    {
        VerifyLogged();
    }

}